// <auto-generated />
using System;
using Infrastructure.Persistence.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Persistence.DbContexts.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Clients", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Client 1"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Client 2"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Client 3"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContractNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Contracts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContractNumber = "C-001",
                            EndDate = new DateTime(2026, 3, 4, 9, 49, 58, 501, DateTimeKind.Local).AddTicks(6813),
                            StartDate = new DateTime(2025, 3, 4, 9, 49, 58, 499, DateTimeKind.Local).AddTicks(9549)
                        },
                        new
                        {
                            Id = 2,
                            ContractNumber = "C-002",
                            EndDate = new DateTime(2027, 3, 4, 9, 49, 58, 501, DateTimeKind.Local).AddTicks(7073),
                            StartDate = new DateTime(2025, 3, 4, 9, 49, 58, 501, DateTimeKind.Local).AddTicks(7067)
                        },
                        new
                        {
                            Id = 3,
                            ContractNumber = "C-003",
                            EndDate = new DateTime(2028, 3, 4, 9, 49, 58, 501, DateTimeKind.Local).AddTicks(7077),
                            StartDate = new DateTime(2025, 3, 4, 9, 49, 58, 501, DateTimeKind.Local).AddTicks(7075)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Geolocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("InterventionId")
                        .HasColumnType("integer");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("InterventionId")
                        .IsUnique();

                    b.ToTable("Geolocations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            InterventionId = 1,
                            Latitude = 34.052199999999999,
                            Longitude = -118.2437
                        },
                        new
                        {
                            Id = 2,
                            InterventionId = 2,
                            Latitude = 40.712800000000001,
                            Longitude = -74.006
                        },
                        new
                        {
                            Id = 3,
                            InterventionId = 3,
                            Latitude = 51.507399999999997,
                            Longitude = -0.1278
                        });
                });

            modelBuilder.Entity("Domain.Entities.Intervention", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ContractId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<int>("SystemTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("TechnicianId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ContractId");

                    b.HasIndex("StatusId");

                    b.HasIndex("SystemTypeId");

                    b.HasIndex("TechnicianId");

                    b.ToTable("Interventions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = 1,
                            ContractId = 1,
                            CreatedAt = new DateTime(2025, 3, 4, 9, 49, 58, 502, DateTimeKind.Local).AddTicks(1045),
                            Notes = "Intervention 1",
                            StatusId = 1,
                            SystemTypeId = 1,
                            TechnicianId = 1
                        },
                        new
                        {
                            Id = 2,
                            ClientId = 2,
                            ContractId = 2,
                            CreatedAt = new DateTime(2025, 3, 4, 9, 49, 58, 502, DateTimeKind.Local).AddTicks(1367),
                            Notes = "Intervention 2",
                            StatusId = 2,
                            SystemTypeId = 2,
                            TechnicianId = 2
                        },
                        new
                        {
                            Id = 3,
                            ClientId = 3,
                            ContractId = 3,
                            CreatedAt = new DateTime(2025, 3, 4, 9, 49, 58, 502, DateTimeKind.Local).AddTicks(1372),
                            Notes = "Intervention 3",
                            StatusId = 3,
                            SystemTypeId = 3,
                            TechnicianId = 3
                        });
                });

            modelBuilder.Entity("Domain.Entities.Signature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("InterventionId")
                        .HasColumnType("integer");

                    b.Property<string>("SignatureData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("SignedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SignedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InterventionId");

                    b.ToTable("Signatures");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            InterventionId = 1,
                            SignatureData = "data1",
                            SignedAt = new DateTime(2025, 3, 4, 9, 49, 58, 502, DateTimeKind.Local).AddTicks(2011),
                            SignedBy = "Signer 1"
                        },
                        new
                        {
                            Id = 2,
                            InterventionId = 2,
                            SignatureData = "data2",
                            SignedAt = new DateTime(2025, 3, 4, 9, 49, 58, 502, DateTimeKind.Local).AddTicks(2390),
                            SignedBy = "Signer 2"
                        },
                        new
                        {
                            Id = 3,
                            InterventionId = 3,
                            SignatureData = "data3",
                            SignedAt = new DateTime(2025, 3, 4, 9, 49, 58, 502, DateTimeKind.Local).AddTicks(2395),
                            SignedBy = "Signer 3"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            StatusName = "Status 1"
                        },
                        new
                        {
                            Id = 2,
                            StatusName = "Status 2"
                        },
                        new
                        {
                            Id = 3,
                            StatusName = "Status 3"
                        });
                });

            modelBuilder.Entity("Domain.Entities.SystemType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("SystemTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "System Type 1"
                        },
                        new
                        {
                            Id = 2,
                            Name = "System Type 2"
                        },
                        new
                        {
                            Id = 3,
                            Name = "System Type 3"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Technician", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Technicians", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "tech1@domain.com",
                            Name = "Technician 1"
                        },
                        new
                        {
                            Id = 2,
                            Email = "tech2@domain.com",
                            Name = "Technician 2"
                        },
                        new
                        {
                            Id = 3,
                            Email = "tech3@domain.com",
                            Name = "Technician 3"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Geolocation", b =>
                {
                    b.HasOne("Domain.Entities.Intervention", "Intervention")
                        .WithOne("Geolocation")
                        .HasForeignKey("Domain.Entities.Geolocation", "InterventionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Intervention");
                });

            modelBuilder.Entity("Domain.Entities.Intervention", b =>
                {
                    b.HasOne("Domain.Entities.Client", "Client")
                        .WithMany("Interventions")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Contract", "Contract")
                        .WithMany("Interventions")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Status", "Status")
                        .WithMany("Interventions")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SystemType", "SystemType")
                        .WithMany("Interventions")
                        .HasForeignKey("SystemTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Technician", "Technician")
                        .WithMany("Interventions")
                        .HasForeignKey("TechnicianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Contract");

                    b.Navigation("Status");

                    b.Navigation("SystemType");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("Domain.Entities.Signature", b =>
                {
                    b.HasOne("Domain.Entities.Intervention", "Intervention")
                        .WithMany("Signatures")
                        .HasForeignKey("InterventionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Intervention");
                });

            modelBuilder.Entity("Domain.Entities.Client", b =>
                {
                    b.Navigation("Interventions");
                });

            modelBuilder.Entity("Domain.Entities.Contract", b =>
                {
                    b.Navigation("Interventions");
                });

            modelBuilder.Entity("Domain.Entities.Intervention", b =>
                {
                    b.Navigation("Geolocation")
                        .IsRequired();

                    b.Navigation("Signatures");
                });

            modelBuilder.Entity("Domain.Entities.Status", b =>
                {
                    b.Navigation("Interventions");
                });

            modelBuilder.Entity("Domain.Entities.SystemType", b =>
                {
                    b.Navigation("Interventions");
                });

            modelBuilder.Entity("Domain.Entities.Technician", b =>
                {
                    b.Navigation("Interventions");
                });
#pragma warning restore 612, 618
        }
    }
}
